name: Production Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    name: Run Tests
    runs-on: self-hosted
    steps:
      - name: Clean workspace manually
        run: |
          # Clean up any existing containers first
          docker system prune -f || true
          # Remove problematic files before checkout
          rm -rf logs/ || true
          rm -f **/*.log || true
          # Clean workspace for fresh checkout
          git clean -fdx || true
      
      - uses: actions/checkout@v4
        with:
          clean: false
      
      - name: Validate Docker files
        run: |
          # Check if Dockerfile exists and is valid
          if [ -f "build/docker/Dockerfile" ]; then
            echo "âœ“ Dockerfile found"
            # Basic syntax check
            docker run --rm -i hadolint/hadolint < build/docker/Dockerfile || echo "Dockerfile has warnings"
          else
            echo "âœ— Dockerfile not found"
            exit 1
          fi
      
      - name: Validate Docker Compose files
        run: |
          # Check if docker-compose files exist
          if [ -f "deploy/docker-compose.yml" ]; then
            echo "âœ“ docker-compose.yml found"
            # Validate compose file syntax
            docker compose -f deploy/docker-compose.yml config > /dev/null
          else
            echo "âœ— docker-compose.yml not found"
            exit 1
          fi
      
      - name: Check test scripts
        run: |
          chmod +x ./tests/*.sh
          echo "âœ“ Test scripts are executable"
          # Syntax check for shell scripts
          for script in ./tests/*.sh; do
            bash -n "$script" && echo "âœ“ $script syntax OK"
          done
      
      - name: Run security scan
        run: |
          echo "Running basic security checks..."
          # Check for hardcoded secrets
          if grep -r -E "(password|secret|key)\s*=\s*['\"][^'\"]+['\"]" . --exclude-dir=.git --exclude="*.md" --exclude-dir=node_modules; then
            echo "âš  Found potential hardcoded secrets"
          else
            echo "âœ“ No obvious hardcoded secrets found"
          fi

  backup:
    name: Backup Production
    runs-on: self-hosted
    needs: test
    steps:
      - name: Clean workspace manually
        run: |
          # Remove problematic files before checkout
          rm -rf logs/ || true
          rm -f **/*.log || true
          # Clean workspace for fresh checkout
          git clean -fdx || true
      
      - uses: actions/checkout@v4
        with:
          clean: false
      
      - name: Create production backup
        run: |
          BACKUP_DIR="./backups/$(date +%Y%m%d_%H%M%S)"
          mkdir -p "$BACKUP_DIR"
          
          # Backup webdna files if they exist
          if [ -d "./webdna-files" ]; then
            cp -r ./webdna-files "$BACKUP_DIR/" 
          fi
          
          echo "Backup created at: $BACKUP_DIR"
          echo "backup_dir=$BACKUP_DIR" >> $GITHUB_ENV

  deploy:
    name: Deploy to Production
    runs-on: self-hosted
    needs: [test, backup]
    
    steps:
      - name: Clean workspace manually
        run: |
          # Remove problematic files before checkout
          rm -rf logs/ || true
          rm -f **/*.log || true
          # Clean workspace for fresh checkout
          git clean -fdx || true
      
      - uses: actions/checkout@v4
        with:
          clean: false
      
      - name: Deploy to Production
        run: |
          echo "ðŸš€ Starting production deployment..."
          
          # Navigate to deploy directory
          cd deploy
          
          # Stop existing containers
          docker compose -f docker-compose.prod.yml down || true
          
          # Build fresh images
          docker compose -f docker-compose.prod.yml build --no-cache
          
          # Start production environment
          docker compose -f docker-compose.prod.yml up -d
          
          # Wait for services to be ready
          echo "Waiting for services to start..."
          sleep 30
          
          # Check service health
          docker compose -f docker-compose.prod.yml ps

  rollback:
    name: Rollback Production
    runs-on: self-hosted
    needs: deploy
    if: failure()
    steps:
      - name: Clean workspace manually
        run: |
          # Remove problematic files before checkout
          rm -rf logs/ || true
          rm -f **/*.log || true
          # Clean workspace for fresh checkout
          git clean -fdx || true
      
      - uses: actions/checkout@v4
        with:
          clean: false
      
      - name: Rollback Production
        run: |
          echo "ðŸ”„ Rolling back production deployment..."
          cd deploy
          
          # Stop current containers
          docker compose -f docker-compose.prod.yml down
          
          # Restore from backup if available
          if [ -d "./backups" ]; then
            LATEST_BACKUP=$(ls -t ./backups/ | head -n1)
            if [ -n "$LATEST_BACKUP" ]; then
              echo "Restoring from backup: $LATEST_BACKUP"
              # Restore backup logic would go here
            fi
          fi
          
          echo "Rollback completed"