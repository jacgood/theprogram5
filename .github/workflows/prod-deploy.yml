name: Production Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run unit tests
        run: |
          chmod +x ./tests/run_tests.sh
          ./tests/run_tests.sh
      
      - name: Run integration tests
        run: |
          chmod +x ./tests/integration_tests.sh
          ./tests/integration_tests.sh
      
      - name: Run security scan
        run: |
          # Add security scanning here
          echo "Running security scan..."

  backup:
    name: Backup Production
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Create production backup
        run: |
          BACKUP_DIR="./backups/$(date +%Y%m%d_%H%M%S)"
          mkdir -p "$BACKUP_DIR"
          
          # Backup webdna files
          cp -r ./webdna-files "$BACKUP_DIR/" || echo "No webdna-files to backup"
          
          echo "Backup created at: $BACKUP_DIR"
          echo "backup_dir=$BACKUP_DIR" >> $GITHUB_ENV

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, backup]
    environment: production
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Create production .env file
        run: |
          cat > deploy/.env.prod << EOF
          NODE_ENV=production
          PORT=8080
          DB_HOST=localhost
          DB_PORT=5433
          DB_NAME=webdna_prod
          DB_USER=webdna_prod
          DB_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}
          WEBDNA_ADMIN_PASSWORD=${{ secrets.PROD_WEBDNA_ADMIN_PASSWORD }}
          LOG_LEVEL=info
          EOF
      
      - name: Build production image
        run: |
          cd build/docker
          docker build -t webdna-prod:latest .
      
      - name: Deploy with zero downtime
        run: |
          cd deploy
          
          # Start new container with temporary name
          docker compose -f docker-compose.prod.yml --env-file .env.prod up -d --scale webdna-server=2
          
          # Wait for new container to be healthy
          sleep 15
          ./health-check.sh prod
          
          # Stop old container
          docker compose -f docker-compose.prod.yml --env-file .env.prod up -d --scale webdna-server=1
      
      - name: Run production health check
        run: |
          cd deploy
          chmod +x ./health-check.sh
          ./health-check.sh prod
      
      - name: Run smoke tests
        run: |
          chmod +x ./tests/smoke_tests.sh
          ./tests/smoke_tests.sh prod
      
      - name: Deployment notification
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Production deployment successful!"
            # Send success notification
          else
            echo "❌ Production deployment failed!"
            # Trigger rollback if needed
          fi

  rollback:
    name: Rollback Production
    runs-on: ubuntu-latest
    needs: deploy
    if: failure()
    steps:
      - name: Rollback to previous version
        run: |
          echo "Rolling back production deployment..."
          # Implement rollback logic here