# WebDNA Application Server Configuration
# For use behind Cloudflare proxy

# Upstream backend
upstream webdna_backend {
    server webdna-server-prod:80;
    keepalive 32;
}

# HTTP server - redirects to HTTPS
server {
    listen 80;
    server_name dev.goodvaluation.com;
    
    # Allow Cloudflare IPs only (disabled for local testing)
    # include /etc/nginx/cloudflare-ips.conf;
    # deny all;
    
    # Redirect all HTTP to HTTPS
    return 301 https://$server_name$request_uri;
}

# HTTPS server
server {
    listen 443 ssl http2;
    server_name dev.goodvaluation.com;
    
    # SSL configuration for Cloudflare Full mode
    ssl_certificate /etc/nginx/ssl/cert.pem;
    ssl_certificate_key /etc/nginx/ssl/key.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    
    # Allow Cloudflare IPs only (disabled for local testing)
    # include /etc/nginx/cloudflare-ips.conf;
    # deny all;
    
    # Security headers (some may be duplicated by Cloudflare)
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # Rate limiting
    limit_req zone=general burst=20 nodelay;
    
    # Logging
    access_log /var/log/nginx/webdna.access.log main;
    error_log /var/log/nginx/webdna.error.log;
    
    # Handle /theprogram and its subdirectories
    location /theprogram {
        # Proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        
        # Cloudflare specific headers
        proxy_set_header CF-Connecting-IP $http_cf_connecting_ip;
        proxy_set_header CF-IPCountry $http_cf_ipcountry;
        proxy_set_header CF-Visitor $http_cf_visitor;
        
        # Proxy settings
        proxy_pass http://webdna_backend;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_buffering off;
        proxy_request_buffering off;
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
        
        # Cache settings (disable for dynamic content)
        proxy_cache off;
    }
    
    # Handle WebCatalog requests
    location /WebCatalog {
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        proxy_pass http://webdna_backend;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        
        # Disable caching for WebCatalog
        proxy_cache off;
        add_header Cache-Control "no-store, no-cache, must-revalidate" always;
    }
    
    # Static assets with caching
    location ~* \.(jpg|jpeg|png|gif|ico|css|js|pdf|doc|docx|xls|xlsx)$ {
        proxy_pass http://webdna_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        
        # Cache static assets
        proxy_cache webdna_cache;
        proxy_cache_valid 200 30m;
        proxy_cache_valid 404 1m;
        proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
        proxy_cache_background_update on;
        proxy_cache_lock on;
        
        add_header X-Cache-Status $upstream_cache_status;
        expires 30d;
        add_header Cache-Control "public, immutable";
    }
    
    # Block access to sensitive files
    location ~* \.(db|hdr|conf|ini|log|bak|backup|sql)$ {
        deny all;
        return 404;
    }
    
    # Health check endpoint
    location /health {
        access_log off;
        return 200 "OK\n";
        add_header Content-Type text/plain;
    }
}